MAIN	START	1000
	JSUB	STKINIT
	LDT	#1
	LDX	#0
RLOOP	LDA	#0
	TD	INPUT
	JEQ	RLOOP
	RD	INPUT
	COMP	ENTER
	JEQ	Cal
	STCH	LEN,X
	STA	NODE_NO
	TIX	MAXLEN
	J	RLOOP

Cal	LDX	#1
	LDCH	LEN,X
	COMP	#0
	JEQ	R_INIT	.Initialize Root
	LDX	#0
	LDCH	LEN,X
	COMP	#49
	JEQ	TEN
	LDX	#1
	LDCH	LEN,X
	ADD	#20
	STA	NODE_NO
	J	R_INIT

TEN	LDX	#1
	LDCH	LEN,X
	ADD	#10
	STA	NODE_NO
	J	R_INIT

R_INIT	LDX	#1
	LDA	#0
RLOOP2	TD	INPUT
	JEQ	RLOOP2
	RD	INPUT
	COMP	SPACE		.Ignore space
	JEQ	RLOOP2
	COMP	ENTER
	JEQ	LINECNT
	JSUB	F_PLUS
	.COMP	DOT
	.JEQ	RLOOP2
	J	F_INDEX		.Find Index
	.STCH	BUF, X
	.TIX	MAXLEN
	.J	RLOOP2

F_PLUS	LDS	#0
	LDT	#1
	LDS	FLAG		.Flag + 1
	ADDR	T,S
	STS	FLAG
	RSUB

F_INDEX	STA	TEMP
	LDA	FLAG
	COMP	#1
	JEQ	FIRST
	COMP	#2
	JEQ	SECOND
	COMP	#3
	JEQ	THIRD

FIRST	LDA	INDEX
	COMP	#1
	JEQ	ROOT
	JSUB	SEARCH
	LDA	TEMP
	STCH	BUF,X
	J	RLOOP2

ROOT	LDA	TEMP
	STCH	BUF,X
	J	RLOOP2

SEARCH	LDX	#2
LOOP	LDCH	BUF,X
	COMP	TEMP
	JEQ	FIND
	TIX	MAXLEN
	J	LOOP

FIND	STX	INDEX
	RSUB

SECOND	LDS	INDEX
	LDT	INDEX
	ADDR	T,S
	STS	INDEX
	LDX	INDEX
	LDA	TEMP
	COMP	#46
	JEQ	RLOOP2
	STCH	BUF,X
	J	RLOOP2

THIRD	STX	INDEX
	TIX	MAXLEN
	LDA	TEMP
	COMP	#46
	JEQ	RLOOP2
	STCH	BUF,X
	J	RLOOP2

LINECNT	LDS	LINE
	ADDR	T,S
	STS	LINE
	LDA	#0
	STA	FLAG
	LDA	LINE
	COMP	NODE_NO
	JEQ	EXIT
	J	RLOOP2

LINE	WORD	48


BUF	RESB	2000
INDEX	WORD	1
FLAG	WORD	0
TEMP	WORD	0
LEN	RESB	2
NODE_NO	RESW	1
MAXLEN	WORD	2000

INPUT	BYTE	0
OUTPUT	BYTE	1

ENTER	WORD	10
SPACE	WORD	32
DOT	WORD	46


.Stack
STKINIT	LDA	#STACK
	STA	TOP
	RSUB

PUSH	LDA	TOP
	ADD	#3
	STA	TOP
	RSUB

POP	LDA	TOP
	SUB	#3
	STA	TOP
	RSUB

STACK	RESW	30
TOP	RESW	1

PRE	LDA	#0
	LDS	#0
	LDT	#0
	LDX	#0
	